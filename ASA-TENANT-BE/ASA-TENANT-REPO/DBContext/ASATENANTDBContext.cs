// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ASA_TENANT_REPO.Models;
using Microsoft.EntityFrameworkCore;

namespace ASA_TENANT_REPO.DBContext;

public partial class ASATENANTDBContext : DbContext
{
    public ASATENANTDBContext()
    {
    }

    public ASATENANTDBContext(DbContextOptions<ASATENANTDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Fcm> Fcms { get; set; }

    public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }

    public virtual DbSet<LogActivity> LogActivities { get; set; }

    public virtual DbSet<Nfc> Nfcs { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductUnit> ProductUnits { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<PromotionProduct> PromotionProducts { get; set; }

    public virtual DbSet<Prompt> Prompts { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportDetail> ReportDetails { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<ShopSubscription> ShopSubscriptions { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserFeature> UserFeatures { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<Zalopay> Zalopays { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Persist Security Info=True;Password=Hau@1310;Username=postgres;Database=ASA-TENANT-DB;Host=localhost");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("citext");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("category_pkey");

            entity.ToTable("category");

            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(100)
                .HasColumnName("category_name");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.Categories)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("category_shop_id_fkey");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.ChatMessageId).HasName("chat_message_pkey");

            entity.ToTable("chat_message");

            entity.Property(e => e.ChatMessageId).HasColumnName("chat_message_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Sender)
                .HasMaxLength(10)
                .HasColumnName("sender");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("chat_message_shop_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("chat_message_user_id_fkey");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("customer_pkey");

            entity.ToTable("customer");

            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Avatar).HasColumnName("avatar");
            entity.Property(e => e.Birthday).HasColumnName("birthday");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .HasColumnType("citext")
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .HasMaxLength(150)
                .HasColumnName("full_name");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.Rank)
                .HasMaxLength(50)
                .HasColumnName("rank");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Spent)
                .HasPrecision(18, 2)
                .HasColumnName("spent");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Shop).WithMany(p => p.Customers)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("customer_shop_id_fkey");
        });

        modelBuilder.Entity<Fcm>(entity =>
        {
            entity.HasKey(e => e.FcmId).HasName("fcm_pkey");

            entity.ToTable("fcm");

            entity.HasIndex(e => e.FcmToken, "fcm_fcm_token_key").IsUnique();

            entity.Property(e => e.FcmId).HasColumnName("fcm_id");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.FcmToken)
                .HasMaxLength(255)
                .HasColumnName("fcm_token");
            entity.Property(e => e.Isactive)
                .HasDefaultValue(true)
                .HasColumnName("isactive");
            entity.Property(e => e.Lastlogin)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lastlogin");
            entity.Property(e => e.Uniqueid)
                .HasMaxLength(100)
                .HasColumnName("uniqueid");
            entity.Property(e => e.Updatedat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updatedat");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Fcms)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("fcm_user_id_fkey");
        });

        modelBuilder.Entity<InventoryTransaction>(entity =>
        {
            entity.HasKey(e => e.InventoryTransactionId).HasName("inventory_transaction_pkey");

            entity.ToTable("inventory_transaction");

            entity.Property(e => e.InventoryTransactionId).HasColumnName("inventory_transaction_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.ImageUrl).HasColumnName("image_url");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");

            entity.HasOne(d => d.Order).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("inventory_transaction_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("inventory_transaction_product_id_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("inventory_transaction_shop_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("inventory_transaction_unit_id_fkey");
        });

        modelBuilder.Entity<LogActivity>(entity =>
        {
            entity.HasKey(e => e.LogActivityId).HasName("log_activity_pkey");

            entity.ToTable("log_activity");

            entity.Property(e => e.LogActivityId).HasColumnName("log_activity_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.LogActivities)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("log_activity_shop_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.LogActivities)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("log_activity_user_id_fkey");
        });

        modelBuilder.Entity<Nfc>(entity =>
        {
            entity.HasKey(e => e.NfcId).HasName("nfc_pkey");

            entity.ToTable("nfc");

            entity.HasIndex(e => e.NfcCode, "nfc_nfc_code_key").IsUnique();

            entity.Property(e => e.NfcId).HasColumnName("nfc_id");
            entity.Property(e => e.Balance)
                .HasPrecision(18, 2)
                .HasColumnName("balance");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.LastUsedDate).HasColumnName("last_used_date");
            entity.Property(e => e.NfcCode)
                .HasMaxLength(64)
                .HasColumnName("nfc_code");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Customer).WithMany(p => p.Nfcs)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("nfc_customer_id_fkey");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("notification_pkey");

            entity.ToTable("notification");

            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("is_read");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .HasColumnName("title");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("notification_shop_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("notification_user_id_fkey");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("order_pkey");

            entity.ToTable("order");

            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Datetime).HasColumnName("datetime");
            entity.Property(e => e.Discount)
                .HasPrecision(18, 2)
                .HasColumnName("discount");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(30)
                .HasColumnName("payment_method");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TotalPrice)
                .HasPrecision(18, 2)
                .HasColumnName("total_price");
            entity.Property(e => e.VoucherId).HasColumnName("voucher_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("order_customer_id_fkey");

            entity.HasOne(d => d.Shift).WithMany(p => p.Orders)
                .HasForeignKey(d => d.ShiftId)
                .HasConstraintName("order_shift_id_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.Orders)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("order_shop_id_fkey");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Orders)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("order_voucher_id_fkey");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("order_detail_pkey");

            entity.ToTable("order_detail");

            entity.Property(e => e.OrderDetailId).HasColumnName("order_detail_id");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUnitId).HasColumnName("product_unit_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.TotalPrice)
                .HasPrecision(18, 2)
                .HasColumnName("total_price");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("order_detail_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("order_detail_product_id_fkey");

            entity.HasOne(d => d.ProductUnit).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductUnitId)
                .HasConstraintName("order_detail_product_unit_id_fkey");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("product_pkey");

            entity.ToTable("product");

            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Barcode)
                .HasMaxLength(64)
                .HasColumnName("barcode");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Cost)
                .HasPrecision(18, 2)
                .HasColumnName("cost");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Discount)
                .HasPrecision(18, 2)
                .HasColumnName("discount");
            entity.Property(e => e.ImageUrl).HasColumnName("image_url");
            entity.Property(e => e.IsLow).HasColumnName("is_low");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.ProductName)
                .HasMaxLength(150)
                .HasColumnName("product_name");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UnitIdFk).HasColumnName("unit_id_fk");
            entity.Property(e => e.UpdateAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("update_at");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("product_category_id_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.Products)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("product_shop_id_fkey");

            entity.HasOne(d => d.UnitIdFkNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.UnitIdFk)
                .HasConstraintName("product_unit_id_fk_fkey");
        });

        modelBuilder.Entity<ProductUnit>(entity =>
        {
            entity.HasKey(e => e.ProductUnitId).HasName("product_unit_pkey");

            entity.ToTable("product_unit");

            entity.Property(e => e.ProductUnitId).HasColumnName("product_unit_id");
            entity.Property(e => e.ConversionFactor)
                .HasPrecision(12, 4)
                .HasColumnName("conversion_factor");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductUnits)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("product_unit_product_id_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.ProductUnits)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("product_unit_shop_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.ProductUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("product_unit_unit_id_fkey");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.PromotionId).HasName("promotion_pkey");

            entity.ToTable("promotion");

            entity.Property(e => e.PromotionId).HasColumnName("promotion_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.EndTime).HasColumnName("end_time");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StartTime).HasColumnName("start_time");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Value)
                .HasPrecision(18, 2)
                .HasColumnName("value");

            entity.HasOne(d => d.Shop).WithMany(p => p.Promotions)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("promotion_shop_id_fkey");
        });

        modelBuilder.Entity<PromotionProduct>(entity =>
        {
            entity.HasKey(e => e.PromotionProductId).HasName("promotion_product_pkey");

            entity.ToTable("promotion_product");

            entity.Property(e => e.PromotionProductId).HasColumnName("promotion_product_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.PromotionId).HasColumnName("promotion_id");

            entity.HasOne(d => d.Product).WithMany(p => p.PromotionProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("promotion_product_product_id_fkey");

            entity.HasOne(d => d.Promotion).WithMany(p => p.PromotionProducts)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("promotion_product_promotion_id_fkey");
        });

        modelBuilder.Entity<Prompt>(entity =>
        {
            entity.HasKey(e => e.PromptId).HasName("prompt_pkey");

            entity.ToTable("prompt");

            entity.Property(e => e.PromptId).HasColumnName("prompt_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("report_pkey");

            entity.ToTable("report");

            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.Cost)
                .HasPrecision(18, 2)
                .HasColumnName("cost");
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("create_at");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.GrossProfit)
                .HasPrecision(18, 2)
                .HasColumnName("gross_profit");
            entity.Property(e => e.OrderCounter).HasColumnName("order_counter");
            entity.Property(e => e.Revenue)
                .HasPrecision(18, 2)
                .HasColumnName("revenue");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Type).HasColumnName("type");

            entity.HasOne(d => d.Shop).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("report_shop_id_fkey");
        });

        modelBuilder.Entity<ReportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId).HasName("report_detail_pkey");

            entity.ToTable("report_detail");

            entity.Property(e => e.ReportDetailId).HasColumnName("report_detail_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ReportId).HasColumnName("report_id");

            entity.HasOne(d => d.Product).WithMany(p => p.ReportDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("report_detail_product_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.ReportDetails)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("report_detail_report_id_fkey");
        });

        modelBuilder.Entity<Shift>(entity =>
        {
            entity.HasKey(e => e.ShiftId).HasName("shift_pkey");

            entity.ToTable("shift");

            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.ClosedDate).HasColumnName("closed_date");
            entity.Property(e => e.OpeningCash)
                .HasPrecision(18, 2)
                .HasColumnName("opening_cash");
            entity.Property(e => e.Revenue)
                .HasPrecision(18, 2)
                .HasColumnName("revenue");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.Shifts)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("shift_shop_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Shifts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("shift_user_id_fkey");
        });

        modelBuilder.Entity<Shop>(entity =>
        {
            entity.HasKey(e => e.ShopId).HasName("shop_pkey");

            entity.ToTable("shop");

            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CurrentAccount)
                .HasDefaultValue(0)
                .HasColumnName("current_account");
            entity.Property(e => e.CurrentRequest)
                .HasDefaultValue(0)
                .HasColumnName("current_request");
            entity.Property(e => e.QrcodeUrl).HasColumnName("qrcode_url");
            entity.Property(e => e.SepayApiKey).HasColumnName("sepay_api_key");
            entity.Property(e => e.ShopName)
                .HasMaxLength(150)
                .HasColumnName("shop_name");
            entity.Property(e => e.ShopToken)
                .HasMaxLength(150)
                .HasColumnName("shop_token");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<ShopSubscription>(entity =>
        {
            entity.HasKey(e => e.ShopSubscriptionId).HasName("shop_subscription_pkey");

            entity.ToTable("shop_subscription");

            entity.Property(e => e.ShopSubscriptionId).HasColumnName("shop_subscription_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.PlatformProductId).HasColumnName("platform_product_id");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopSubscriptions)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("shop_subscription_shop_id_fkey");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("transaction_pkey");

            entity.ToTable("transaction");

            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
            entity.Property(e => e.AppTransId)
                .HasMaxLength(50)
                .HasColumnName("app_trans_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(16)
                .HasColumnName("payment_status");
            entity.Property(e => e.ReturnCode).HasColumnName("return_code");
            entity.Property(e => e.ReturnMessage)
                .HasMaxLength(255)
                .HasColumnName("return_message");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ZpTransId)
                .HasMaxLength(50)
                .HasColumnName("zp_trans_id");

            entity.HasOne(d => d.Order).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("transaction_order_id_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("transaction_shop_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("transaction_user_id_fkey");
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("unit_pkey");

            entity.ToTable("unit");

            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");

            entity.HasOne(d => d.Shop).WithMany(p => p.Units)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("unit_shop_id_fkey");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("user_pkey");

            entity.ToTable("user");

            entity.HasIndex(e => e.Username, "user_username_key").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Avatar).HasColumnName("avatar");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Role).HasColumnName("role");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.Shop).WithMany(p => p.Users)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("user_shop_id_fkey");
        });

        modelBuilder.Entity<UserFeature>(entity =>
        {
            entity.HasKey(e => e.UserFeatureId).HasName("user_feature_pkey");

            entity.ToTable("user_feature");

            entity.Property(e => e.UserFeatureId).HasColumnName("user_feature_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.FeatureId).HasColumnName("feature_id");
            entity.Property(e => e.FeatureName)
                .HasMaxLength(64)
                .HasColumnName("feature_name");
            entity.Property(e => e.IsEnabled)
                .HasDefaultValue(true)
                .HasColumnName("is_enabled");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.UserFeatures)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("user_feature_user_id_fkey");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.VoucherId).HasName("voucher_pkey");

            entity.ToTable("voucher");

            entity.HasIndex(e => e.Code, "voucher_code_key").IsUnique();

            entity.Property(e => e.VoucherId).HasColumnName("voucher_id");
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Expired).HasColumnName("expired");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Value)
                .HasPrecision(18, 2)
                .HasColumnName("value");

            entity.HasOne(d => d.Shop).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("voucher_shop_id_fkey");
        });

        modelBuilder.Entity<Zalopay>(entity =>
        {
            entity.HasKey(e => e.ZalopayId).HasName("zalopay_pkey");

            entity.ToTable("zalopay");

            entity.Property(e => e.ZalopayId).HasColumnName("zalopay_id");
            entity.Property(e => e.AppId)
                .HasMaxLength(64)
                .HasColumnName("app_id");
            entity.Property(e => e.CallbackUrl).HasColumnName("callback_url");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Key1).HasColumnName("key1");
            entity.Property(e => e.Key2).HasColumnName("key2");
            entity.Property(e => e.ShopId).HasColumnName("shop_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Shop).WithMany(p => p.Zalopays)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("zalopay_shop_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}